r##"# [ no_mangle ] pub extern "C" fn Boo_boo_init ( ) -> * const :: std :: os :: raw :: c_void {
 let this : Rc < RefCell < Boo > > = boo_init ( ) ;
 let this : * const RefCell < Boo > = Rc :: into_raw ( this ) ;
 this as * const :: std :: os :: raw :: c_void
 }"##;

r##"# [ no_mangle ] pub extern "C" fn Boo_f1 ( this : * mut RefCell < Boo >, ) -> ( ) {
 let this : & RefCell < Boo > = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut this : Ref < Boo > = < Ref < Boo >>:: swig_from ( this ) ;
 let mut this : & Boo = this . swig_deref ( ) ;
 let mut ret : ( ) = Boo :: f1 ( this , ) ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Boo_delete ( this : * mut RefCell < Boo > ) {
 let this : Rc < RefCell < Boo > > = unsafe { Rc :: from_raw ( this ) } ;
 drop ( this ) ;
 }"##;

r##"# [ no_mangle ] pub extern "C" fn Foo_f1 ( a_0 : * const :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a_0 . is_null ( ) ) ;
 let a_0 : & RefCell < Boo > = unsafe { &* ( a_0 as * const RefCell < Boo > ) } ;
 let mut a_0 : Ref < Boo > = < Ref < Boo >>:: swig_from ( a_0 ) ;
 let mut a_0 : & Boo = a_0 . swig_deref ( ) ;
 let mut ret : ( ) = f1 ( a_0 ) ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Foo_f2 ( a_0 : * mut :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a_0 . is_null ( ) ) ;
 let a_0 : & mut RefCell < Boo > = unsafe { & mut * ( a_0 as * mut RefCell < Boo > ) } ;
 let mut a_0 : & RefCell < Boo > = a_0 ;
 let mut a_0 : RefMut < Boo > = < RefMut < Boo >>:: swig_from ( a_0 ) ;
 let mut a_0 : & mut Boo = a_0 . swig_deref_mut ( ) ;
 let mut ret : ( ) = f2 ( a_0 ) ;
 ret }"##;


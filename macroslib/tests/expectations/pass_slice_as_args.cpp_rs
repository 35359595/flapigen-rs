r##"# [ no_mangle ] pub extern "C" fn Boo_f1 ( this : * mut Boo , a_0 : CRustObjectMutSlice , ) -> CRustSliceu32 {
 let a_0 : & mut [ Foo ] = unsafe { :: std :: slice :: from_raw_parts_mut ( a_0 . data as * mut Foo , a_0 . len ) } ;
 let this : & Boo = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : & [ u32 ] = Boo :: f1 ( this , a_0 ) ;
 let ret : CRustSliceu32 = CRustSliceu32 { data : ret . as_ptr ( ) , len : ret . len ( ) , } ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Boo_f2 ( this : * mut Boo , a_0 : CRustObjectSlice , ) -> CRustSliceu32 {
 let a_0 : & [ Foo ] = unsafe { :: std :: slice :: from_raw_parts ( a_0 . data as * const Foo , a_0 . len ) } ;
 let this : & Boo = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : & [ u32 ] = Boo :: f2 ( this , a_0 ) ;
 let ret : CRustSliceu32 = CRustSliceu32 { data : ret . as_ptr ( ) , len : ret . len ( ) , } ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Java_org_example_Foo_do_1f1 ( env : * mut JNIEnv , _ : jclass , this : jlong , a0 : jboolean , ) -> jboolean {
 let mut a0 : bool = a0 . swig_into ( env ) ;
 let this : & mut Foo = unsafe { jlong_to_pointer ::< Foo > ( this ) . as_mut ( ) . unwrap ( ) } ;
 let mut ret : bool = f1 ( this , a0 ) ;
 let mut ret : jboolean = < jboolean >:: swig_from ( ret , env ) ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Java_org_example_Foo_f2 ( env : * mut JNIEnv , _ : jclass , a0 : jboolean , ) -> jboolean {
 let mut a0 : bool = a0 . swig_into ( env ) ;
 let mut ret : bool = f2 ( a0 ) ;
 let mut ret : jboolean = < jboolean >:: swig_from ( ret , env ) ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn Java_org_example_Foo_init ( env : * mut JNIEnv , _ : jclass , a0 : jboolean , ) -> jlong {
 let mut a0 : bool = a0 . swig_into ( env ) ;
 let this : Foo = Foo :: new ( a0 ) ;
 let this : Box < Foo > = Box :: new ( this ) ;
 let this : * mut Foo = Box :: into_raw ( this ) ;
 this as jlong }"##;

r##"impl SomeTrait for JavaCallback {
 # [ allow ( unused_mut ) ] fn on_state_changed1 ( & self , a0 : i32 , a1 : bool ) {
 swig_assert_eq_size ! ( :: std :: os :: raw :: c_uint , u32 ) ;
 swig_assert_eq_size ! ( :: std :: os :: raw :: c_int , i32 ) ;
 let env = self . get_jni_env ( ) ;
 if let Some ( env ) = env . env { let mut a0 : jint = < jint >:: swig_from ( a0 , env ) ;
 let mut a1 : jboolean = < jboolean >:: swig_from ( a1 , env ) ;
 unsafe { ( ** env ) . CallVoidMethod . unwrap ( ) ( env , self . this , self . methods [ 0 ] , a0 , a1 as :: std :: os :: raw :: c_uint ) ;
 if ( ** env ) . ExceptionCheck . unwrap ( ) ( env ) != 0 { error ! ( "on_state_changed1: java throw exception" ) ; ( ** env ) . ExceptionDescribe . unwrap ( ) ( env ) ; ( ** env ) . ExceptionClear . unwrap ( ) ( env ) ; } } ; } } }"##;

r##"# [ no_mangle ] pub extern "C" fn TestReferences_get_foo_ref ( this : * mut TestReferences , ) -> * const :: std :: os :: raw :: c_void {
 let this : & TestReferences = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : & Foo = TestReferences :: get_foo_ref ( this , ) ;
 let ret : * const :: std :: os :: raw :: c_void = ( ret as * const Foo ) as * const :: std :: os :: raw :: c_void ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn TestReferences_update_foo ( this : * mut TestReferences , a_0 : * const :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a_0 . is_null ( ) ) ;
 let a_0 : & Foo = unsafe { &* ( a_0 as * const Foo ) } ;
 let this : & mut TestReferences = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : ( ) = TestReferences :: update_foo ( this , a_0 ) ;
 ret }"##;

r##"# [ no_mangle ] pub extern "C" fn TestReferences_update_mut_foo ( this : * mut TestReferences , a_0 : * mut :: std :: os :: raw :: c_void , ) -> ( ) {
 assert ! ( ! a_0 . is_null ( ) ) ;
 let a_0 : & mut Foo = unsafe { & mut * ( a_0 as * mut Foo ) } ;
 let this : & mut TestReferences = unsafe { this . as_mut ( ) . unwrap ( ) } ;
 let mut ret : ( ) = TestReferences :: update_mut_foo ( this , a_0 ) ;
 ret }"##;

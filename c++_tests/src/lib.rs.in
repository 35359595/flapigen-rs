#[derive(Clone)]
pub struct Foo {
    data: i32,
    name: String,
}

impl Foo {
    fn new(data: i32, name: &str) -> Foo {
        println!("Foo::new name '{}'", name);
        Foo {
            data,
            name: name.to_string(),
        }
    }
    fn f(&self, a: i32, b: i32) -> i32 {
        println!("Foo::f {} {} {}", self.data, a, b);
        self.data + a + b
    }
    fn name(&self) -> &str {
        &self.name
    }   
    fn set_field(&mut self, v: i32) {
        self.data = v;
    }
    fn call_me(cb: Box<SomeObserver>) {
        println!("call_me begin");
        cb.on_state_changed(2, false);
    }
    fn one_and_half(&self) -> f64 {
        (self.data as f64) * 1.5
    }
}

trait SomeObserver {
    fn on_state_changed(&self, _: i32, _: bool);
}

foreign_interface!(interface SomeObserver {
    self_type SomeObserver;
    onStateChanged = SomeObserver::on_state_changed(&self, _: i32, _: bool);
});

foreigner_class!(class Foo {
    self_type Foo;
    constructor Foo::new(_: i32, _: &str) -> Foo;
    method Foo::f(&self, a: i32, b: i32) -> i32;
    method Foo::name(&self) -> &str; alias getName;
    method Foo::set_field(&mut self, v: i32);
    method Foo::one_and_half(&self) -> f64;
    static_method Foo::call_me(_: Box<SomeObserver>);
});

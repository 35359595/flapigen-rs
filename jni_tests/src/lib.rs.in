use std::rc::Rc;
use std::cell::RefCell;
use std::path::{Path, PathBuf};
use std::time::SystemTime;

use jni_c_header::{jint, JNIEnv, jclass, jlong, jstring, jdouble, jfloat, jboolean,
          jobject, jfieldID, jobjectArray, jmethodID};

struct Foo {
    data: i32,
    name: String
}

impl Foo {
    fn new(val: i32, name: &str) -> Foo {
        println!("name: {}", name);
        Foo{data: val, name: name.to_string()}
    }

    fn f(&self, a: i32, b: i32) -> i32 {
        self.data + a + b
    }

    fn name(&self) -> &str {
        &self.name
    }

    fn f_double(&self, a: f64, b: f64) -> f64 {
        a.hypot(b) + self.data as f64
    }
}

fn f_hypot(a: f64, b: f64) -> f64 {
    a.hypot(b)
}

fn now() -> SystemTime {
    return SystemTime::now()
}

foreigner_class!(class Foo {
    self_type Foo;
    constructor Foo::new(_: i32, _: &str) -> Foo;
    method Foo::f(&self, _: i32, _: i32) -> i32;  alias calcF;
    method Foo::f_double(&self, _: f64, _: f64) -> f64;
    method Foo::name(&self) -> &str; alias getName;
    static_method f_hypot(_: f64, _: f64) -> f64; alias fHypot;
    static_method now() -> SystemTime;
});

struct Boo {
    a: i32,
}

impl Boo {
    fn new() -> Boo { Boo{a: 17} }
    fn test(&self, a: bool) -> f32 {
        if a { ::std::f32::consts::E } else { ::std::f32::consts::PI }
    }
    fn set_a(&mut self, val: i32) {
        self.a = val;
    }
    fn get_a(&self) -> i32 {
        self.a
    }
}

fn create_boo() -> Rc<RefCell<Boo>> {
    Rc::new(RefCell::new(Boo::new()))
}

foreigner_class!(class Boo {
    self_type Boo;
    constructor create_boo() -> Rc<RefCell<Boo>>;
    method Boo::test(&self, _: bool) -> f32;
    method Boo::set_a(&mut self, _: i32); alias setA;
    method Boo::get_a(&self) -> i32; alias getA;
});

struct TestPathAndResult {
    path: PathBuf,
    boo: Rc<RefCell<Boo>>,
}

impl TestPathAndResult {
    fn empty() -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::empty");
        Err("test error path".into())
    }
    fn new(path: &Path) -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::new path: {:?}", path);
        Ok(TestPathAndResult{path: path.into(), boo: create_boo()})
    }

    fn get_path(&self) -> String {
        self.path.to_str().unwrap().into()
    }

    fn get_boo(&self) -> Rc<RefCell<Boo>> {
        self.boo.clone()
    }
}

foreigner_class!(class TestPathAndResult {
    self_type TestPathAndResult;
    constructor TestPathAndResult::empty() -> Result<TestPathAndResult, String>;
    constructor TestPathAndResult::new(path: &Path) -> Result<TestPathAndResult, String>;
    method TestPathAndResult::get_path(&self) -> String; alias getPath;
    method TestPathAndResult::get_boo(&self) -> Rc<RefCell<Boo>>; alias getBoo;
    foreigner_code "    public int javaFunc() { return 17; }\n";
    foreigner_code r#"
    public Boo[] testHandArrayReturn() { return do_testHandArrayReturn(this.mNativeObj); }
    private static native Boo[] do_testHandArrayReturn(long me);
"#;
});

#[allow(non_snake_case)]
#[no_mangle]
pub fn Java_com_example_TestPathAndResult_do_1testHandArrayReturn(
    env: *mut JNIEnv, _: jclass, _: jlong) -> jobjectArray {
    let class_id = ::std::ffi::CString::new("com/example/Boo").unwrap();
    let jcls: jclass = unsafe { (**env).FindClass.unwrap()(env, class_id.as_ptr()) };
    if jcls.is_null() {
        panic!("Can not find class_id {:?}", class_id);
    }
    let n = 10;
    let ret: jobjectArray = unsafe { (**env).NewObjectArray.unwrap()(env, n, jcls, ::std::ptr::null_mut()) };
    if ret.is_null() {
        panic!("Can not create object array");
    }

    let field_id = ::std::ffi::CString::new("mNativeObj").unwrap();
    let type_id = ::std::ffi::CString::new("J").unwrap();
    let field_id: jfieldID = unsafe { (**env).GetFieldID.unwrap()(env, jcls, field_id.as_ptr(), type_id.as_ptr()) };
    assert!(!field_id.is_null());

    for i in 0..n {
        let elem: jobject = unsafe { (**env).AllocObject.unwrap()(env, jcls) };
        let boo = create_boo();
        boo.borrow_mut().set_a(i);
        unsafe {
            (**env).SetLongField.unwrap()(env, elem, field_id, Box::into_raw(Box::new(boo)) as jlong);
            (**env).SetObjectArrayElement.unwrap()(env, ret, i, elem);
            (**env).DeleteLocalRef.unwrap()(env, elem);
        }
    }
    ret
}

use std::mem;
use std::ptr;
use std::ffi::CStr;
use std::rc::Rc;
use std::cell::RefCell;
use std::path::{Path, PathBuf};

use jni::{jint, JNIEnv, jclass, jlong, jstring, jdouble, jfloat, jboolean};

struct Foo {
    data: i32,
    name: String
}

impl Foo {
    fn new(val: i32, name: &str) -> Foo {
        println!("name: {}", name);
        Foo{data: val, name: name.to_string()}
    }

    fn f(&self, a: i32, b: i32) -> i32 {
        self.data + a + b
    }

    fn name(&self) -> &str {
        &self.name
    }

    fn f_double(&self, a: f64, b: f64) -> f64 {
        a.hypot(b) + self.data as f64
    }
}

foreigner_class!(class Foo {
    self_type Foo;
    constructor Foo::new(_: i32, _: &str) -> Foo;
    method Foo::f(&self, _: i32, _: i32) -> i32;  alias calcF;
    method Foo::f_double(&self, _: f64, _: f64) -> f64;
    method Foo::name(&self) -> &str; alias getName;
});

struct Boo {}

impl Boo {
    fn new() -> Boo { Boo{} }
    fn test(&self, a: bool) -> f32 {
        if a { ::std::f32::consts::E } else { ::std::f32::consts::PI }
    }
}

fn create_boo() -> Rc<RefCell<Boo>> {
    Rc::new(RefCell::new(Boo::new()))
}

foreigner_class!(class Boo {
    self_type Boo;
    constructor create_boo() -> Rc<RefCell<Boo>>;
    method Boo::test(&self, _: bool) -> f32;
});

struct TestPathAndResult {
    path: PathBuf,
}

impl TestPathAndResult {
    fn empty() -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::empty");
        Err("test error path".into())
    }
    fn new(path: &Path) -> Result<TestPathAndResult, String> {
        println!("TestPathAndResult::new path: {:?}", path);
        Ok(TestPathAndResult{path: path.into()})
    }

    fn get_path(&self) -> String {
        self.path.to_str().unwrap().into()
    }
}

foreigner_class!(class TestPathAndResult {
    self_type TestPathAndResult;
    constructor TestPathAndResult::empty() -> Result<TestPathAndResult, String>;
    constructor TestPathAndResult::new(path: &Path) -> Result<TestPathAndResult, String>;
    method TestPathAndResult::get_path(&self) -> String; alias getPath;
});

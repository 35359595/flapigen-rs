strategy:
  matrix:
    linux-stable:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: stable
    mac-stable:
      imageName: 'macos-10.14'
      rustup_toolchain: stable
    linux-beta:
      imageName: 'ubuntu-16.04'
      rustup_toolchain: beta
    mac-beta:
      imageName: 'macos-10.14'
      rustup_toolchain: beta
    windows-stable-64bit:
      imageName: 'vs2017-win2016'
      rustup_toolchain: stable
      platform: x64
pool:
  vmImage: $(imageName)


steps:
  - checkout: self
    submodules: true
  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.prependpath]$HOME/.cargo/bin"
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install Rust on linux/mac
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
      echo ##vso[task.setvariable variable=PATH]%PATH%%USERPROFILE%\.cargo\bin;
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install Rust on windows
  - script: |
      curl http://releases.llvm.org/5.0.2/LLVM-5.0.2-win64.exe -o llvm-installer.exe
      7z x llvm-installer.exe -oc:\llvm-binary
      echo ##vso[task.setvariable variable=LIBCLANG_PATH]C:\llvm-binary\bin
      echo ##vso[task.setvariable variable=PATH]%PATH%C:\llvm-binary\bin;
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install llvm on windows
  - script: |
      set SCCACHE_VER=0.2.8
      curl -L https://github.com/mozilla/sccache/releases/download/0.2.8/sccache-0.2.8-x86_64-pc-windows-msvc.tar.gz -o sccache.tar.gz
      7z x sccache.tar.gz
      7z x sccache-%SCCACHE_VER%-x86_64-pc-windows-msvc.tar
      copy /Y sccache-%SCCACHE_VER%-x86_64-pc-windows-msvc\sccache.exe %USERPROFILE%\.cargo\bin\sccache.exe
      sccache --version
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install sccache on windows
  - script: |
      export TAR="boost_1_66_0.tar.gz"
      curl -L -o $TAR https://dl.bintray.com/boostorg/release/1.66.0/source/$TAR
      tar -xzf $TAR
      echo "##vso[task.setvariable variable=BOOST_ROOT]$PWD/boost_1_66_0"
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Install boost on mac os
  - script: |
      clang --version
      rustc -vV
      cargo -vV
      javac -version
      cmake --version
      cp workspace.Cargo.toml Cargo.toml
      python ci_build_and_test.py --skip-android-tests
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Build and test on linux/mac
  - script: |
      clang --version
      rustc -vV
      cargo -vV
      javac -version
      cmake --version
      set SCCACHE_BUCKET=swig%PLATFORM%
      echo %SCCACHE_BUCKET%
      sccache --start-server
      set RUSTC_WRAPPER=%USERPROFILE%/.cargo/bin/sccache.exe
      cp workspace.Cargo.toml Cargo.toml
      python -c "fin = open('Cargo.toml', 'r'); res = fin.read().replace('debug = true', ''); fin.close(); fout = open('Cargo.toml', 'w'); fout.write(res + '\n'); fout.close();"
      python ci_build_and_test.py --skip-android-tests
    displayName: Build and test on windows
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    env:
      AWS_ACCESS_KEY_ID: $(S_AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(S_AWS_SECRET_ACCESS_KEY)
      SCCACHE_ENDPOINT: $(S_SCCACHE_ENDPOINT)

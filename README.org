* Getting started

Suppose you have the following Rust code:
#+BEGIN_SRC rust
struct Foo {
    data: i32
}

impl Foo {
    fn new(val: i32) -> Foo {
        Foo{data: val}
    }

    fn f(&self, a: i32, b: i32) -> i32 {
        self.data + a + b
    }
}

fn f2(a: i32) -> i32 {
    a * 2
}
#+END_SRC

and you want to write in Java something like this:

#+BEGIN_SRC java
Foo foo = new Foo(5);
int res = foo.f(1, 2);
assert res == 8;
#+END_SRC

In order to implement it rust_swig suggests the following functionality,
in Rust project you write (in Rust language):

#+BEGIN_SRC rust
foreigner_class!(class Foo {
    self_type Foo;
    constructor Foo::new(_: i32) -> Foo;
    method Foo::f(&self, _: i32, _: i32) -> i32;
    static_method f2(_: i32) -> i32;
});
#+END_SRC

and that's all, as a result rust_swig generates JNI wrappers for Rust functions
and Java code to call these JNI functions.

See [[https://github.com/Dushistov/rust_swig_test_jni][rust_swig test for jni]] for working example.

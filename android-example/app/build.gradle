apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "net.akaame.myapplication"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDir 'src/main/libs'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.2.0'
    testCompile 'junit:junit:4.12'
}

def mobcoreLibPath = ".."
def cargoOutputDir = "../target"
def archsInfo = ['armeabi': 'arm-linux-androideabi', 'x86': 'i686-linux-android']

archsInfo.each { arch_name, target ->
    tasks.create(name: "mobcoreBuild${arch_name}", type: Exec, description: "Building core for ${arch_name}") {
        workingDir mobcoreLibPath
        commandLine 'cargo', 'build', "--target=${target}", '--release'
    }
    tasks.create(name: "mobcoreCopy${arch_name}", type: Copy, dependsOn: "mobcoreBuild${arch_name}", description: "Copy core(${arch_name}) to suitable plac") {
        from "${cargoOutputDir}/${target}/release/libmobcore.so"
        into "src/main/libs/${arch_name}"
    }
    tasks.create(name: "mobcoreSync${arch_name}", type: Sync, dependsOn: "mobcoreCopy${arch_name}") {
        from "${mobcoreLibPath}/src/libs/${arch_name}"
        into "src/main/libs/${arch_name}"
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn "mobcoreSync${arch_name}"
    }
    preBuild.dependsOn "mobcoreSync${arch_name}"
}

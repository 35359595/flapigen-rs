pub enum TestEnum {
    A,
    B,
}

foreign_enum!(enum TestEnum {
    A = TestEnum::A,
    B = TestEnum::B,
});

pub struct TestStaticClass {
}

impl TestStaticClass {
    pub fn print_hello() {
        println!("Hello from rust");
    }
}

foreigner_class!(class TestStaticClass {
    static_method TestStaticClass::print_hello();
});

pub struct TestClass {
    i: i32,
}

impl TestClass {
    pub fn new() -> TestClass {
        TestClass {
            i: 0
        }
    }

    pub fn increment(&mut self) {
        self.i += 1;
    }

    pub fn print(&self) {
        println!("TestClass::i: {}", self.i);
    }

    pub fn get(&self) -> i32 {
        self.i
    }
}

foreigner_class!(class TestClass {
    self_type TestClass;
    constructor TestClass::new() -> TestClass;
    method TestClass::increment(&mut self);
    method TestClass::print(&self);
});
